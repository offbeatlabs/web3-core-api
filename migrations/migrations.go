// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0001_init.up.sql (486B)
// migrations/migrations.go (8.132kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xb1\x6e\xc3\x30\x0c\x44\xe7\xfa\x2b\x08\x4d\x09\xe0\xa9\xe8\x96\x8f\x11\x18\x91\x88\x05\xcb\xa4\x4b\x53\x81\xfd\xf7\x45\x5a\x07\x75\x5b\x75\x93\xf8\x78\xe0\xe1\x2e\x19\xa3\x33\x38\x5e\x0b\x43\x70\x1d\x59\x96\x00\xa7\x0e\x00\x20\xd4\x99\xd0\x99\x22\x7a\x80\xc7\xcb\xf3\xc4\x20\xea\x20\xb5\x94\xbe\x7b\x09\xcb\x36\x5d\xb5\x04\xb8\xa3\xa5\x01\xed\x07\x13\x9c\xb8\x4d\x92\x8a\x1b\x26\x8f\x48\x64\xbc\x2c\xff\x6c\x0d\x98\xa5\x8d\x8a\xde\x34\x80\xf3\xea\x8f\xdf\x6c\x7a\xcf\xc4\x16\x3f\xdd\xc7\x4c\x6d\xd1\x73\xad\x4d\xeb\x42\x71\xb6\x9c\x38\x00\x69\xbd\x16\x7e\x0e\x27\xb4\x91\x3d\x26\x9c\x7f\x93\xd7\xb7\x41\xab\xc5\x34\xa0\xdc\x8e\xb2\xd9\xf2\x84\xb6\xc1\xc8\x1b\x9c\x1a\xee\x7a\xf8\xf6\x72\xee\xce\x97\xae\xdb\x4b\xa8\x92\xdf\x2b\x43\x16\xe2\x15\x42\xa6\x35\x7e\x4d\x76\x29\x8b\xdb\x16\x40\xe5\xd0\xd3\xdf\x2c\xfb\x3d\xb8\xfe\x70\xe4\xf2\x11\x00\x00\xff\xff\x5f\x7d\xad\x61\xe6\x01\x00\x00")

func _0001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initUpSql,
		"0001_init.up.sql",
	)
}

func _0001_initUpSql() (*asset, error) {
	bytes, err := _0001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init.up.sql", size: 486, mode: os.FileMode(0644), modTime: time.Unix(1666893931, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xe2, 0x18, 0xe6, 0xc3, 0xb, 0x6e, 0x9b, 0x76, 0x6f, 0x1e, 0x65, 0xc5, 0x9e, 0x86, 0xbc, 0xaa, 0x64, 0x55, 0x3f, 0x7, 0x20, 0x7b, 0x2d, 0x9b, 0xfe, 0x5e, 0xdf, 0xe8, 0x95, 0xe8, 0x6f}}
	return a, nil
}

var _migrationsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x8f\xdb\x36\xf2\x7f\x6d\x7d\x8a\xf9\x1b\x48\xff\x52\xeb\xca\x8f\xf2\xd3\x61\x5f\xb4\x49\x0b\xe4\x70\x4d\x0f\x4d\x8b\x7b\x11\x06\x01\x25\x51\x36\xb1\xb2\xa8\x52\xf2\x2e\x37\x0b\x7f\xf7\xc3\x70\x28\x59\xf6\x7a\x1f\x12\x14\x87\xbb\x05\x56\x16\x29\xce\xe3\x6f\x38\x33\x94\x86\x43\x78\xad\x52\x01\x1b\x51\x08\xcd\x6b\x91\x42\x7c\x07\x1b\xf5\x7d\x2c\x8b\x94\xd7\x3c\x84\x37\xbf\xc2\xbb\x5f\x7f\x87\x9f\xde\xbc\xfd\x3d\xf4\x86\x43\xa8\xd4\x5e\x27\xa2\x5a\xe3\xfd\x4e\x6e\x34\xaf\xa5\x2a\xaa\xe1\x68\x34\x1a\x7f\x92\x85\xac\xc3\x7d\x19\x56\x7f\xe6\xe0\xcf\x16\xb3\x1f\x03\xcf\x2b\x79\x72\xcd\x37\xa2\xb3\xd6\xf3\xe4\xae\x54\xba\x06\xdf\xeb\xf5\xe3\xbb\x5a\x54\x7d\xaf\xd7\x4f\xd4\xae\xd4\xa2\xaa\x86\x9b\xcf\xb2\xb4\x13\xfa\xae\xac\xd5\xb0\xda\xf2\x49\x34\xc7\x89\x6c\x57\xe3\x8f\x54\x74\x1d\x4a\xb5\xaf\x65\x8e\x03\x65\x39\x94\xbc\xde\x0e\x33\x99\x0b\xbc\xc1\x89\xaa\xd6\xb2\xd8\xd8\x67\xb5\xdc\x89\xbe\x17\x78\x5e\xb6\x2f\x12\x70\xc6\xfd\x26\x78\xea\xe3\x0d\x7c\xf8\x88\x7a\x0c\xa0\xe0\x3b\x01\x44\x16\x80\xdf\xcc\x0a\xad\x95\x0e\xe0\xde\xeb\x6d\x3e\xdb\x11\xac\xaf\x00\xd5\x0c\xdf\x89\x5b\x64\x22\xb4\x6f\xed\xc0\xf1\x8f\xfb\x2c\x13\xda\xb2\x0d\x02\xaf\x27\x33\x4b\xf0\x7f\x57\x50\xc8\x1c\x59\xf4\xb4\xa8\xf7\xba\xc0\xe1\x00\xb2\x5d\x1d\xfe\x84\xdc\x33\xbf\xaf\x05\x4f\xe1\xd5\x9f\x6b\x78\x75\xdb\x27\x4d\xac\xac\xc0\xeb\x1d\x3c\xaf\x77\xc3\x35\xc4\xfb\x0c\x48\x0e\x09\xf1\x7a\x9f\x48\x9d\x2b\x90\x2a\x7c\xad\xca\x3b\xff\x9b\x78\x9f\x0d\x60\xf3\x39\xf0\x7a\x49\xfe\x53\xa3\x69\xf8\x3a\x57\x95\xf0\x03\xef\xaf\xd2\x07\xd9\x10\xff\x47\x18\x09\xad\x49\x6f\x37\x19\xef\xb3\xf0\x47\x54\xdd\x0f\x06\xb8\xc2\x3b\x78\x5e\x7d\x57\x0a\xe0\x55\x25\x6a\x74\xf9\x3e\xa9\x91\x8b\xb5\x0f\x1c\x20\x5e\x4f\x16\x99\x02\x00\x55\x85\x3f\xcb\x5c\xbc\x2d\x32\xe5\xf5\x52\xb9\x11\x55\x0d\x1f\x28\x32\xc2\xf7\xf2\xb3\xa0\xd5\x0d\x4f\x07\x6f\x43\xd1\xe1\x6e\xf1\x05\x70\x10\x7b\xbd\x4a\x7e\xb6\x63\x59\xd4\xf3\x99\xd7\xdb\xe1\x4e\x38\x8a\xfb\x45\xa5\xc2\x4e\xfe\x2e\x77\x02\x30\x84\x42\xbc\x43\x39\x36\x8c\xfc\x4c\x9e\xcb\x0a\xe0\x1d\xdf\x09\x3f\x70\x12\x50\xa6\xf3\x40\x26\x43\x94\xee\x1d\x9e\xa0\x45\x53\xfc\x80\xb4\x39\x25\x45\x45\x9f\x24\x45\x5d\xfd\xa0\xab\xf9\x29\x03\x34\xed\x39\x06\x68\x9c\x1f\x1c\x0d\x7d\xc0\xc1\x59\xff\x38\x93\xb7\xd5\x1b\xa9\xfd\x00\x62\xa5\xf2\x2e\x35\xcf\xab\x67\x2c\xbf\xab\xc8\x70\xa1\x33\x9e\x88\xfb\x43\x87\xda\x85\x0b\xee\x80\x4f\x9f\xda\x3c\xf3\x47\xf9\xfe\xcf\x1c\xae\x5c\xa4\xf8\x7d\x66\xc6\x19\x33\xcb\x98\x99\xd1\x92\x99\xd1\xe8\xf2\x7f\x96\x31\xb3\x98\x31\xb3\x1a\x33\x33\x1d\x33\x33\xcb\x98\x49\xa6\xcc\xcc\xf0\x79\xc2\xcc\x32\x62\x66\xbe\x60\x26\x9b\x30\x33\x89\x99\xe1\x09\x33\xab\x98\x99\x88\x33\x33\x59\x31\x33\x9e\x32\x33\x9f\x30\x23\x70\x6e\xc6\xcc\x22\xa2\x31\xd2\xe3\xef\x7c\xc4\xcc\x32\x63\x66\x95\x30\x93\x2e\x99\x99\x73\x66\x66\x82\x99\x78\x45\xe3\x64\xcc\x4c\x36\x66\x26\x8a\x98\x49\x56\xcc\xc4\x19\x33\xb3\x05\x33\xcb\x31\x33\x13\xd4\x61\xc2\xcc\x28\x65\x26\x8d\x99\x49\x53\x66\xb2\x98\x99\x79\xc2\x4c\xb6\x62\x46\xe0\xfa\x94\x99\x64\xce\xcc\x78\xc9\xcc\x2a\x25\x7e\xf1\x98\x64\xa0\xfe\x76\x8c\x3a\x4d\x99\x19\xaf\x98\x19\xe1\x6f\xc2\xcc\x88\x93\xfd\xcb\x11\x33\x2b\x94\xb3\x60\x66\x36\x21\x5b\xa7\x9c\x99\x45\x4c\xcf\x44\xc4\x8c\x70\x3c\xf1\xd9\x78\x44\x36\x22\x0d\xda\x14\x4d\x98\x89\x56\xcc\x4c\xd1\x57\x68\xff\x98\x19\x21\x98\x99\xc7\xcc\xcc\x52\x66\x46\x48\x87\xe3\x25\x8d\x11\x8f\x6c\xee\x70\x59\xd1\x7d\x9c\x90\xdf\xc7\x9c\x99\x71\xc4\xcc\x74\xe1\x6c\xc4\xf9\x84\x99\xf9\xcc\xf1\x17\x84\x17\xda\x85\x36\xa1\xcd\xf3\x88\x70\x9e\x44\xe4\x8b\xb9\xb3\x4b\x2c\xc8\x9f\xab\x05\x33\x69\x46\x38\x2c\x38\xc9\x4d\x66\x4e\xee\x9c\x99\x68\xc9\xcc\x22\x63\x86\xcf\x99\xc9\x52\x66\x56\x68\x2f\x8e\xc7\xcc\x2c\x70\xcc\x09\x0f\xa4\x45\x99\x88\xd9\xc2\xc5\x4e\x8a\xb6\x27\xcc\x4c\x16\xcc\x44\xc2\xe9\xb4\x60\x26\x9e\x39\x5d\xd1\xde\x09\xc5\x13\xea\x88\x63\xc4\x9a\x23\xf6\x11\xd9\x88\xfa\x8d\xe7\xe4\xe7\x98\x33\x13\xa5\x84\xd3\x24\x21\x1d\xd1\x6f\xd3\x29\xc5\x28\xfa\x00\x79\x21\x1e\x89\x60\x26\x9a\x93\x0f\xa7\x68\xff\x9c\x64\x26\x91\x8b\xa7\x19\x33\xe3\x19\xe1\x90\x39\x8c\xc4\x84\x70\x9d\xe3\xda\x25\xe1\x8d\x3c\x67\x63\x1a\x4f\x67\x14\x87\x11\xc6\x20\x67\x26\x43\x7b\x57\xcc\xcc\x22\xe2\x8b\xf4\xd3\x39\xc5\x4a\x34\xa2\x67\x2b\xc4\x7c\x4a\x76\xa0\x8f\x31\xae\x31\x1e\x91\x8f\xc5\x5d\x50\x9c\x4c\x85\x8b\xe5\xce\xbe\xc3\x7f\xe4\x8d\xfe\xb2\xfe\xc3\x3d\xc2\x29\x66\x68\x5d\xbf\x29\xd0\x67\xdb\xdc\x55\x8e\x4b\x15\xb9\xa9\x2f\x9d\x8a\xee\xf5\x7a\xe7\x79\x62\xe0\xf5\x7a\xfd\xf3\x16\xa5\x3f\xf0\x7a\x41\x9b\xcc\xcf\x28\x50\xda\xb7\xb6\x38\x75\xa5\xd9\xea\xd4\xb6\x00\x97\xb5\x7c\xae\xc6\xb6\xa5\xd1\xd6\xb6\xf5\xd5\x79\x32\xbc\xc7\x32\xb1\x86\x0b\xea\x02\x56\x81\x35\xcc\x16\xb3\x01\x60\x3e\x5f\x77\xd3\xbd\x3f\x9a\xcf\x66\x81\x7d\x80\x69\x7a\x4d\x69\xfc\x8f\x42\x1a\x7f\x3c\x9f\xcf\x17\x8b\x68\x3a\x5d\x0e\x60\x14\x1c\xbc\x1e\x47\xb1\xdf\x58\xeb\xee\xad\x49\x6b\x70\x96\xa1\x4e\x6b\x7b\x1d\x00\xd5\xd9\x35\x7c\x98\x4e\x3e\xee\x65\x51\x2f\xef\x47\x26\x4a\x06\x30\x32\x22\xc5\xeb\x74\x6a\xef\x23\xbc\x46\x23\xbc\x26\x0b\xbc\xce\xc6\xf6\x1e\x85\x99\xd5\xdc\xae\x5c\xe1\xd5\x2e\xe1\xf6\xe1\xc2\x32\x58\x4d\xec\xc2\x19\x5e\x33\xbb\x70\x6c\x59\x2e\xec\x9a\x94\xee\x63\xbc\xc6\x19\x5e\x27\x56\xf8\xd4\xae\x9f\x58\xb1\x53\xcb\x21\xb5\xb4\x89\xa5\xb2\x52\x13\xfb\x70\x99\x1c\x19\x4f\xd2\xc3\xa1\x0d\x16\xde\xb6\x20\xc3\x21\xfc\x60\x1b\x90\x5c\xf1\xb4\x02\x5e\xa4\x40\x6b\x2a\xa8\xb7\x4d\x73\x92\x29\x6d\x47\x1b\x79\x23\x0a\xdb\x08\xd9\x46\xf8\x6d\xdd\xae\xe5\x05\xc5\x08\xc8\xac\x43\x97\xa8\x7d\x9e\x42\xa1\x6a\x88\x05\x64\x6a\x5f\xa4\xa0\x34\x52\x9e\x3c\x40\xc9\x22\x0d\x29\x08\xad\x32\xfe\x73\x5d\x68\xc2\x0b\x55\xc8\x84\xe7\xd8\x6b\x20\x94\xae\xd1\x0d\x7f\x13\x65\xce\x13\xe1\x53\xb3\xd6\x67\xac\x3f\x80\xfe\xb0\x3f\x80\xef\xc7\x14\x96\xd9\x00\xd4\xb5\x0d\x5d\x17\x74\x1f\x4e\x78\x7d\xfc\x1b\x3e\xc6\x80\xe5\x6d\x90\x67\x18\xd1\x17\x42\xfa\xd1\xbe\x91\x1c\xfa\xaa\x82\x84\x17\xff\x8f\x3e\xe2\xf6\x4c\x61\xd5\x5f\xc3\xab\x9b\xb3\x66\x12\xbb\xc9\x16\x98\xd0\x85\x21\xc2\xd3\x3b\x78\xcf\xcb\x40\x27\x5a\xd7\x3a\xae\x41\x17\xd5\xf7\xd4\x83\x3d\x44\x34\x51\x45\x2d\x8a\xba\x02\x5e\x01\x6f\x5a\x35\x5f\x16\x55\x8d\xca\xaa\x0c\x9a\x13\x41\xd0\xc5\x85\xd8\x9d\xa1\x43\x37\x5d\x74\xd0\xad\xad\xf7\x8e\x80\x06\xad\x35\x44\x42\x27\x04\x4a\x07\xa4\xf3\x2f\xfb\xaa\x26\xc3\x64\x05\xb9\xbc\x16\x2e\x36\xe3\x7d\x0d\x25\x2f\x64\x52\xc1\xed\x56\x14\x6e\xf6\xd6\x06\x51\xe3\x38\x17\x80\x4d\x60\x56\x72\x57\xe6\x32\x93\xa2\x82\x8a\x67\x02\x30\x8d\x48\x9e\xcb\xcf\xf6\x04\x86\x16\x6e\x72\x15\xf3\x1c\x6e\xb8\x96\x3c\xce\x45\xe5\x0c\x6d\x75\x38\x35\x93\xbc\x81\xd6\x3d\x62\xda\xc3\xf8\xb0\x1a\xfb\x7d\xeb\xf0\xb5\x5b\xdc\x87\xef\xe8\x88\xf5\x1d\xf4\x83\x35\xe0\x50\x68\x4d\xa8\xfa\x41\x70\x72\x62\xe0\xe7\x5e\x71\x68\x9e\xf8\xc6\xcd\xbd\xc8\x43\xc8\x8c\x9c\xf4\xd7\x78\xe8\x52\x38\x3c\xe8\xfa\x1d\xd6\xa7\x6e\x0d\x4e\xa2\xd4\x1e\x51\x9e\xca\x3f\xb6\x4e\xfc\xa7\x93\x10\x6a\x75\x16\xea\x9d\x43\xd8\xff\x58\x36\xb2\x2e\xfe\xca\x8c\x44\xb5\xf0\x45\x09\xa9\x11\xf3\x64\x52\x7a\x43\xa7\xd7\x2e\xcc\xee\x40\xab\x08\xb7\x4c\xe6\x02\x6e\x65\xbd\x3d\xc7\xfb\x14\xec\x36\x9c\x5f\x80\x77\x57\xca\x33\xb8\x93\x7a\xe7\x25\xe8\xfc\xa8\xfd\x5f\x8b\xff\x03\x4d\xef\x0f\x17\x80\x72\x18\x7c\x65\x44\x90\x23\x1f\xc4\xc4\x97\x8a\x7e\x2c\x4a\x68\x45\x75\x84\x1a\x76\xbc\xb4\x45\x29\xcf\xe1\xba\x50\xb7\x85\x0d\x11\xca\x16\xf5\x56\x48\x0d\xc9\x56\x24\xd7\xd5\x7e\xd7\xe4\x28\xc7\x02\x7b\xd8\x1d\x2f\x3f\x10\x20\x1f\x9f\x44\x71\x57\xa2\x7b\x77\xfc\x5a\x3c\x43\x92\x8b\xc2\x6f\xf0\xc2\x94\x8d\x89\xa9\x70\xc8\x6b\x5e\x6c\x44\x8b\xe6\x19\x74\x2d\xc8\xb8\xfa\xe3\x4b\xf6\xb1\xed\x94\xad\xef\x77\x25\x51\xc1\x55\xeb\xff\xae\xeb\x77\xe5\x83\x8e\x0e\x03\xa8\x3a\xd9\x65\x85\x9d\x51\x9d\xcd\x52\x75\x03\xdf\x12\xf8\x58\xea\x8e\x49\x9c\x48\x1a\xbf\x34\x4f\x06\x30\xfa\x62\x37\x10\xa7\x2b\xe0\x65\x29\x8a\xd4\x6e\x89\xaa\x81\xbd\x9b\x57\x70\xde\x99\xd1\xd2\x4b\x8c\x81\x1a\x6b\xd0\x00\xb6\x2a\x4f\x51\x39\xc1\x93\xad\xdb\xf1\xee\xcd\xad\xd2\x03\x0c\x94\x52\xa4\x50\x2b\x90\x75\xe5\x8a\x84\x7d\x6d\xd2\xb0\x42\x4b\x5a\x70\xd1\xf6\x87\xc7\x9c\x7b\xef\xc2\x49\x69\x7d\x7e\xd6\x19\x9c\xa4\x34\x11\xef\x6d\x61\xae\xf5\x5e\x9c\xa4\xa3\x0a\x6e\x85\x16\x10\xef\x65\x5e\x1f\x73\x5a\x6a\xd7\x67\x39\xdf\x80\x28\xd0\xae\x34\xf4\x12\x55\x54\x75\x97\xdd\x95\x7b\x6b\xd4\x49\x9c\xfa\x04\x4f\x9b\x27\xc9\xaf\xb1\xc8\xd5\x2d\x70\x48\x84\xae\xb9\xb4\xa9\x31\x95\x5a\x24\xb5\xd2\x77\x20\x76\xb1\x48\x53\x91\x82\x2c\x8e\x74\xa7\x2f\xb9\x91\xe0\x67\xa5\x41\x18\xbe\x2b\x73\x6b\xc2\x9d\xda\x83\xde\x17\x9d\x55\xa0\x0a\xc0\xdf\x61\x18\x86\x76\xef\xd9\x49\x6c\x25\xb9\x24\x95\x90\x4d\xa6\xf2\x5c\xdd\x22\x44\x5b\x29\x34\xd7\xc9\xf6\xce\xbe\x2a\xc7\x3f\x4b\xdd\x0c\x00\x32\xa5\xc2\xda\xd4\xc7\x09\xb9\xdb\x74\x1e\x03\xf0\xb0\x2c\x36\xdd\x89\xb8\x99\xa8\xdb\x2e\xe7\x8d\xd4\x7e\x1f\x19\xf7\x83\xd3\x86\xa7\x89\xd6\xfb\xbe\x93\x83\xd9\x57\xee\x36\xfd\xc3\xa0\xeb\x52\x22\x1e\xe2\x83\x47\x19\x58\x3d\x90\xdc\xca\x7f\xc0\xa0\xe1\x1f\x58\xaf\x1c\xe7\x0b\x55\x0b\x23\xab\xfa\x9c\x71\xd3\xa8\x0c\x70\xfd\x29\x2b\x5c\x2a\xf3\xfc\xa1\x0a\xd6\xc2\xc3\x69\xa1\xd2\x0f\x0e\x4a\x0f\x9b\xf1\x42\xa5\xa2\x49\x3e\xb5\x16\xc2\xd6\x1d\xdc\xbb\x76\xeb\x61\xe6\x19\xd9\xfd\xf9\x95\x45\xac\x57\xf2\x7a\xfb\x0f\x59\xd5\x5d\x92\xf7\x65\x2e\x6b\xff\x84\xa3\xa5\xc1\xf5\x98\x26\x3e\x0d\xa0\x3c\xa6\x89\x96\x83\x4d\x7f\x56\xdf\x2b\xc0\x9f\xf0\xf5\x56\xe6\xa9\x16\xc5\x87\xf2\x23\x3e\x92\x19\xd0\xd3\x4e\xb6\xfc\x9a\x03\x52\x8f\x52\xea\xa1\x79\x8f\x6f\x65\xfd\x8c\x7e\x7d\xc1\x47\x81\xa7\xf8\x62\x1a\xbb\x79\x3c\x5b\x9e\xd8\xd4\xa4\xcc\x04\xc7\xef\x4e\xf2\xe6\xc9\x3a\x52\xe6\xe6\x98\x39\xf5\xcd\xe0\x48\x74\x92\x3b\xf1\x49\xf7\xcb\x82\x43\xbc\xf3\xf6\xdf\x1a\x69\x77\xde\xc5\xcc\xe7\xf5\x5a\xa9\x9d\x2c\xf9\x6d\x13\x39\xcd\x2b\xe8\x86\xef\x15\x7c\xe3\x6e\xef\xad\x9b\x2e\xd0\x3c\x92\x4b\xef\xcf\x93\xe9\x45\xda\xc3\x61\xe0\x1d\x28\xcb\xfe\x26\xaa\x5a\x69\x41\xce\xd7\x34\xb0\x0d\x3f\x55\x80\x7d\x91\x8a\xee\xe9\xa0\xcd\x7d\x6e\xbf\x74\xc9\xfd\x54\xea\xb3\xef\x5c\xd4\x45\x3e\x79\x72\x7d\xf4\x8d\x96\x7b\x99\xd5\x93\xcd\xa1\xa0\x25\x6d\x0f\x10\x2f\x21\xa7\x8f\x58\xaa\x0a\x7f\xb9\x4e\xa5\xfe\x21\xcf\xfd\x4f\x98\xa6\xff\xc9\xeb\x2d\x29\xdc\x7c\xd6\x0b\x9b\x6d\x1f\x04\x83\xd3\xb7\x5f\x8b\x28\x7a\xf2\x7b\xdb\xa9\x28\xfa\x76\x18\xfe\x4b\xcb\x5a\x20\x8f\x73\x79\x56\xc4\x00\xc8\x23\x68\x5c\x48\x1f\x58\x5e\x22\xc1\x0d\x55\x15\xbe\xde\xd6\x12\xbb\x8a\xcb\xcc\x1b\xb6\xf4\xd9\xe5\x7c\xdc\xb4\x83\x5d\xf0\xaa\x2f\x01\x1f\xb4\x48\xf6\xba\x92\x37\x22\xbf\x14\x08\xd5\x53\x91\x90\xb8\x8d\x70\x0a\x69\xeb\x7b\xaf\x87\x05\x53\xe6\xe2\x09\x6f\x5c\x0e\x3a\xda\xb1\xb6\xcb\xd5\x5e\x93\x0d\xad\xb4\x63\x02\x48\xba\x7b\x9f\xe0\xba\xa0\x78\x1b\x11\x7f\x57\xb2\x70\xe9\xd9\x52\x06\x4f\x77\x96\x6d\x53\x79\x38\xff\xc0\x44\xaf\x81\x1f\x42\x75\xe1\x74\xff\x95\xe5\xa2\xfd\x98\xd6\x55\xdd\x25\xb6\xb6\xd6\xa5\x52\x1f\x06\xcf\x17\x93\x30\x0c\xed\xbf\x77\xf0\xfe\x1d\x00\x00\xff\xff\x01\x4a\x10\x65\xc4\x1f\x00\x00")

func migrationsGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationsGo,
		"migrations.go",
	)
}

func migrationsGo() (*asset, error) {
	bytes, err := migrationsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations.go", size: 8132, mode: os.FileMode(0644), modTime: time.Unix(1666775505, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x4b, 0x5f, 0xdc, 0xd3, 0xb0, 0x11, 0xa1, 0x6a, 0x42, 0xcd, 0xf1, 0xcc, 0x37, 0x85, 0xc8, 0x11, 0x39, 0xf3, 0x3c, 0xc, 0x3, 0xf8, 0xfd, 0x2f, 0x8f, 0x2c, 0x36, 0x7b, 0xca, 0x2c, 0x60}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_init.up.sql": _0001_initUpSql,
	"migrations.go":    migrationsGo,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_init.up.sql": {_0001_initUpSql, map[string]*bintree{}},
	"migrations.go": {migrationsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
